t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t3<- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t3$TotalIntench2 = 57000; t3$FiberWidthCh1 = 8;t3$VarIntenCh4 = 100
predict(modFit,newdata=t3)
t4 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t4$FiberWidthCh1 = 8;t4$arIntenCh4 = 100; t4$PerimStatusCh1=2
predict(modFit,newdata=t4)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t1 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t1$TotalIntench2 = 23000; t1$FiberWidthCh1 = 10; t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t3<- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t3$TotalIntench2 = 57000; t3$FiberWidthCh1 = 8;t3$VarIntenCh4 = 100
predict(modFit,newdata=t3)
t4 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t4$FiberWidthCh1 = 8;t4$arIntenCh4 = 100; t4$PerimStatusCh1=2
predict(modFit,newdata=t4)
for (i in seq(1:ncol(t1))) {
t1[1,i] = NA
}
t1$TotalIntench2 = 23000; t1$FiberWidthCh1 = 10; t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
for (i in seq(1:ncol(t1))) {
t2[1,i] = NA
}
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
set.seed(125)
install.packages("rattle")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
set.seed(125)
training = segmentationOriginal[ segmentationOriginal$Case=="Train" ,]
testing = segmentationOriginal[segmentationOriginal$Case=="Test" ,]
dim(training);dim(testing)
modFit <- train( Class ~ ., method="rpart", data=training)
pr = predict(modFit,newdata=testing)
head(pr)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
t1 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t1$TotalIntench2 = 23000; t1$FiberWidthCh1 = 10; t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
t1 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t1$TotalIntench2 = 23000; t1$FiberWidthCh1 = 10; t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t3<- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t3$TotalIntench2 = 57000; t3$FiberWidthCh1 = 8;t3$VarIntenCh4 = 100
predict(modFit,newdata=t3)
t4 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t4$FiberWidthCh1 = 8;t4$arIntenCh4 = 100; t4$PerimStatusCh1=2
predict(modFit,newdata=t4)
t4$TotalIntench2 <- NA
t4$FiberWidthCh1 = 8;t4$arIntenCh4 = 100; t4$PerimStatusCh1=2
predict(modFit,newdata=t4)
t4
t4$TotalIntench2 <- NaN
t4$FiberWidthCh1 = 8;t4$arIntenCh4 = 100; t4$PerimStatusCh1=2
predict(modFit,newdata=t4)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgpm")
install.packages("pgmm")
install.packages("pgmm")
install.packages("~/Downloads/pgmm_1.0.tar.gz",repos=NULL,type="source")
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
data(olive)
library(pgmm)
data(olive)
names(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
dim(olive)
set.seed(125)
head(olive)
unique(olive$area)
unique(olive$Area)
intrain <- createDataPartition(olive$Area,p=0.5,list=FALSE)
training = olive[intrain,]
testing = olive[-intrain,]
dim(traing);dim(testing)
dim(training);dim(testing)
modFit <- train(Area ~ ., method="rpart", data=training)
head(training)
x <- is.na(training)
x
x <- complete.cases(training)
dim(x)
modFit <- train(Area ~ ., method="rpart", data=training)
library(rattle)
fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=newdata)
x <- testing[1,5]
x
x <- testing[5,]
x
predit(modFit,newdata=x)
predict(modFit,newdata=x)
str(olive)
olive$Area = as.character(olive$Area)
modFit <- train(Area ~ ., method="rpart", data=training)
fancyRpartPlot(modFit$finalModel)
intrain <- createDataPartition(olive$Area,p=0.5,list=FALSE)
training = olive[intrain,]
testing = olive[-intrain,]
modFit <- train(Area ~ ., method="rpart", data=training)
fancyRpartPlot(modFit$finalModel)
str(trainig)
str(training)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=newdata)
x <- testing[5,]
predict(modFit,newdata=x)
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=newdata)
x <- testing[5,]
predict(modFit,newdata=x)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(trainSA)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm",data=trainSA,family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predict_trainSA = predict(modFit,newdata=trainSA)
predict_testSA = predict(modFit,newdata=testSA)
predict_trainSA
predict_trainSA[1]
trainSA[1,"chd"]
trainSA[1,c("chd")]
trainSA[5,c("chd")]
names(trainSA)
trainSA[5,10]
head(trainSA)
misClass(trainSA[,10],predict_trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
misClass(trainSA[,10],predict_trainSA)
missClass(trainSA[,10],predict_trainSA)
missClass(testSA[,10],predict_testSA)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train)
vowel.train$y <- as.factor(as.character(vowel.train))
str(vowel.train)
unique(vowel.train)
unique(vowel.train$y)
dim(vowel.train)
vowel.test$y <- as.factor(as.character(vowel.test))
dim(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(as.character(vowel.train$y))
vowel.train$y <- as.factor(as.character(vowel.train$y))
set.seed(33833)
modFit <- train(y ~ ., data=vowel.train,method="rf",prox=TRUE)
library(caret)
modFit <- train(y ~ ., data=vowel.train,method="rf",prox=TRUE)
modFit
?varlamp
?varlmp
?varImp
varImp(modFit)
varImp(modFit,scale=FALSE)
modFit <- train(y ~ ., data=vowel.train,method="rf")
varImp(modFit,scale=FALSE)
missClass(trainSA[1,10],predict_trainSA)
missClass(testSA[1,10],predict_testSA)
varImp(modFit)
data(mtcars)
names(mtcars)
str(mtcars)
modFit <- lm(mpg ~ as.factror(cyl) + wt, data=mtcars)
mtcars$cyl = as.factor(as.character(mtcars$cyl))
modFit <- lm(mpg ~ factror(cyl) + wt, data=mtcars)
data(mtcars)
modFit <- lm(mpg ~ cyl + wt, data=mtcars)
modFit
?lm
str(mtcars)
mtcars$cyl = as.factor(as.character(mtcars$cyl))
str(mtcars)
modFit <- lm(mpg ~ cyl + wt, data=mtcars)
modFit
summary(modFit)
str(mtcars)
plot(modFit)
?par
par(mfrow=2,mfcol=2)
par(mfrow=2,mfcol=2)
par(mfrow=c(2,2))
plot(modFit)
summary(modFit)
modFit1 <- lm(mpg ~ cyl * wt, data=mtcars)
summary(modFit1)
plot(modFit1)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
modFit2 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(modFit2)
summary(modFit)
modFit$coefficients
names(summary(modFit))
names(summary(modFit))$coefficients
summary(modFit)$coefficients
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
modFit_xy <- lm(y ~ x)
plot(modFit_xy)
modFit_xy$fitted.values
plot(x,modFit_xy$fitted.values)
plto(x,y)
plot(x,y)
hat(x)
hat(modFit_xy$fitted.values)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
summary(modFit_xy)
names(modFit_xy)
modFit_xy$df.residual
modFit_xy$df.model
modFit_xy$model
class(modFit_xy$model)
class(modFit_xy$model$x)
plot(modFit_xy$model$x,modFit_xy$model$y)
modFit_xy$terms
anova(modFit_xy)
beta1hat=modFit_xy$coeff[2]
beta1hat
beta4hat=modFit_xy$coeff[4]
beta4hat
beta3hat
beta3hat=modFit_xy$coeff[3]
beta3hat
dfbetas(modFit_xy)
?dfbetas
anova(modFit,modFit1)
fit1 <- lm(mpg ~ factor(cyl) + wt , data=mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl*wt, data=mtcars)
anova(fit1,fit2)
installed.packages("lrtest")
install.packages("lrtest")
anova(fit1,fit2,test="F")
anova(fit1,fit2,test="Chisq")
summary(fit1)
summary(fit2)
help(mtcars)
library(shiny)
runApp("project")
setwd("~/coursera/data_products/project/")
runApp("project")
runApp("project")
setwd("~/coursera/data_products")
runApp("project")
help(mtcars)
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
dir
setwd("~/coursera/data_products")
runApp("myshinyapp")
library(shinyapps)
deployApp()
pw
pwd
setwd("~/coursera/data_products/myshinyapp/")
deployApp()
setwd("~/coursera/data_products/myslidifypitch/")
author("Sasidhar Donaparthi")
library(slidify)
author("Sasidhar Donaparthi")
author("Sasi")
library(slidify)
setwd("~/coursera/data_products/")
author("myslidifypitch")
author("myslidifypitch")
setwd("~/coursera/data_products/")
setwd("~/coursera/data_products")
library(slidify)
author("myslidifypitch")
slidify()
slidify("index.Rmd")
browseURL("index.html")
library(shinyapps)
setwd("~/coursera/data_products//myshinyapp")
setwd("~/coursera/data_products/myshinyapp")
deployApp()
library(slidify)
setwd("~/coursera/data_products/myslidifypitch")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
help(mtcars)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
summary(modFit)
cor(mtcars$hp,mtcars$disp)
cor(mtcars$cyl,mtcars$disp)
names(summar(modFit))
names(summary(modFit)
)
summary(mdoFit)$call
summary(modFit)$call
summary(modFit)$r.squared
summary(modFit)$terms
names(summary(modFit))
slidify("index.Rmd")
slidify("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
library(caret)
slidifyDefaults()
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
intrain = createDataPartition(mtcars$mpg,p=0.7,list=FALSE)
training = mpg[intrain,]
testing = mpg[-intrain,]
dim(training);dim(testing)
modFit <- train(mpg ~ cyl + wt + hp + am, method="lm",data=training)
mpg_predict <- predict(modFit,newdata=testing)
names(mtcars)
names(training)
data(mtcars)
library(caret)
data(mtcars)
intrain = createDataPartition(mtcars$mpg,p=0.7,list=FALSE)
training = mpg[intrain,]
testing = mpg[-intrain,]
dim(training);dim(testing)
modFit <- train(mpg ~ cyl + wt + hp + am, method="lm",data=training)
mpg_predict <- predict(modFit,newdata=testing)
mydata <- mtcars
View(mydata)
slidify("index.Rmd")
browseURL("index.html")
summary(modFit$finalModel)
summary(modFit)
confusionMatrix(modFit)
confusionMatrix(modFit$finalModel)
confusionMatrix(modFit$finalModel)
confusionMatrix(modFit)
library(caret)
set.seed(12345)
intrain = createDataPartition(mydata$mpg,p=0.7,list=FALSE)
training = mydata[intrain,]
testing = mydata[-intrain,]
dim(training);dim(testing)
modFit <- train(mpg ~ cyl + wt + hp + am, method="lm",data=training)
mpg_predict <- predict(modFit,newdata=testing)
sensitivity(testing$mpg,mpg_predict)
sensitivity(testing,mpg_predict)
?sensitivity
pred = as.factor(mpg_predict)
tuth <- as.factor(testinng$mpg)
tuth <- as.factor(testing$mpg)
sensitivity(pred, truh)
sensitivity(pred, tuh)
sensitivity(pred, tuth)
head[mpg_predict]
head(mpg_predict)
head(testing$mpg)
head(round(mpg_predict,1))
head(testing$mpg)
setwd("~/coursera/data_products")
library(shiny)
runApp()
setwd("~/coursera/data_products/myshinyapp")
runApp()
slidify("index.Rmd")
setwd("~/coursera/data_products/myslidifypitch/")
setwd("~/coursera/data_products/myslidifypitch")
slidify("index.Rmd")
browseURL("index.html")
help(mtcars)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish("sasidhar.donaparthi@gmail.com","https://github.com/sdonapar/myslidifypitch.git")
publish(user="sasidhar.donaparthi@gmail.com",repos="myslidifypitch")
publish(user="sasidhar.donaparthi@gmail.com",repo="myslidifypitch")
publish(user="sasidhar.donaparthi@gmail.com",repo="myslidifypitch")
setwd("~/coursera/data_products/mtcars")
publish(user="sasidhar.donaparthi@gmail.com",repo="mtcars")
publish(user="sasidhar.donaparthi@gmail.com",repo="mtcars")
slidify("index.Rmd")
publish(user="sasidhar.donaparthi@gmail.com",repo="mtcars")
slidify("index.Rmd")
publish(user="sasidhar.donaparthi@gmail.com",repo="mtcars")
slidify("index.Rmd")
publish(user="sasidhar.donaparthi@gmail.com",repo="mtcars")
publish(user="sasidhar.donaparthi@gmail.com",repo="mtcars")
getwd()
publish(user="sasidhar.donaparthi@gmail.com",repo="mtcars")
publish(user="sasidhar.donaparthi@gmail.com",repo="mtcars")
publish(user="sasidhar.donaparthi@gmail.com",repo="mtcars")
slidify("index.Rmd")
ls
publish(user="sasidhar.donaparthi@gmail.com",repo="mtcars")
publish(user="sasidhar.donaparthi@gmail.com",repo="http://github.com/sdonapar/mtcars.git")
publish(user="sasidhar.donaparthi@gmail.com",repo="mtcars")
publish(user="sasidhar.donaparthi@gmail.com",repo="myslidifypitch")
library(shinyapps)
setwd("~/coursera/data_products/myshinyapp")
deployApp()
setwd("~/coursera/data_products/myslidifypitch")
publish(user="sdonapar",repo="myslidifypitch")
setwd("~/coursera/data_products/myshinyapp")
runApp()
runApp()
library(shinyapps)
deployApp()
